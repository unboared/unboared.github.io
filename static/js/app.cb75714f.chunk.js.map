{"version":3,"sources":["src/config/Const.ts","src/components/useURLParams.tsx","src/Connexion/Gamepad.tsx","src/Connexion/Screen.tsx","src/TestAPI/components/attributeDisplay.tsx","src/TestAPI/components/eventDisplay.tsx","src/TestAPI/Gamepad.tsx","src/TestAPI/Screen.tsx","src/components/game_runner/v0.1.0/game_runner.tsx","src/components/game_runner/v0.3.0/useWebViewPlugin.tsx","src/components/game_runner/game_runner_list.tsx","src/components/game_runner/v0.3.0/game_runner.tsx","src/components/game_runner/game_runner.tsx","src/Runner/Gamepad.tsx","src/Runner/Screen.tsx","src/config/Scene.jsx","src/screen_app.tsx","src/config/UsersForTest.ts","src/components/user_selection/user_selection.tsx","src/gamepad_app.tsx","src/WebViewApp/Home/Gamepad.tsx","src/WebViewApp/components/ColorView.tsx","src/WebViewApp/Home/Screen.tsx","src/WebViewApp/Game/Gamepad.tsx","src/WebViewApp/Game/Screen.tsx","src/WebViewApp/config/Const.jsx","src/WebViewApp/Endgame/Gamepad.tsx","src/WebViewApp/Endgame/Screen.tsx","src/WebViewApp/config/Scene.jsx","src/WebViewApp/screen_app.tsx","src/WebViewApp/gamepad_app.tsx","src/home_app.tsx","src/app.tsx","App.tsx","index.js"],"names":["computeDefaultGamepadURL","baseURL","charAt","length","getGamepadURLFormat","gameURL","host","wss","version","sessionID","encodeURIComponent","getGamepadURL","useURLParams","createGlobalStorage","set","urlParams","undefined","setUrlParams","newParams","useRouteParamsManager","route","state","useEffect","params","styles","StyleSheet","create","center","flex","alignSelf","alignItems","justifyContent","Gamepad","emitAction","useCommunication","theme","unboaredTheme","dark","View","style","backgroundColor","icon","text","onPress","Screen","normalize","useNormalize","unboared","useUnboared","startTest","loadScene","useListener","startGame","url","getSessionLink","roomID","getSessionID","connectedPlayers","getPlayers","masterID","getUID","getMasterID","position","right","bottom","DisplayAttributes","getDeviceState","useDeviceState","usePlayers","getUsername","getDeviceID","getGamepadIDs","getScreenIDs","getHostID","getPlayer","customStyle","type","JSON","stringify","map","id","EventDisplay","useState","message","setMessage","eventID","onReady","api","data","offReady","onSceneChange","offSceneChange","onConnect","offConnect","onDisconnect","offDisconnect","onPlayerChange","offPlayerChange","onDeviceStateChange","offDeviceStateChange","onMute","offMute","onPause","offPause","onResume","offResume","msg","index","flexDirection","flexShrink","left","useScene","backToHome","isConnected","setIsConnected","deviceID","useConnexionStatus","TRANSMIT_CODE","GameRunnerMap","Map","title","src","iframeRef","useRef","language","useLanguage","currentScene","translate","useTranslate","gameLoaded","setGameLoaded","getColor","getAvatar","isScreen","me","uid","username","avatar","color","send","broadcast","postToWebView","useCallback","current","contentWindow","postMessage","handler","e","console","log","origin","action","name","players","scenario","game","scenarioComponent","from","window","addEventListener","removeEventListener","scene","active","infos","ref","width","height","frameBorder","webviewRef","isReady","webviewLoaded","setWebviewLoaded","player","onDeviceStatePropertyChange","key","value","getDeviceStateProperty","offDeviceStatePropertyChange","webviewMessageHandler","event","devices","screenID","push","gamepadID","hostID","myDeviceID","session","to","navigateToHome","navigateTo","useWebViewPlugin","GameRunnerList","keys","GameRunner","Runner","get","indexOf","SCENE","gamepad","screen","Platform","OS","location","protocol","initialScene","loader","config","CommunicationConfig","getSocketIO","gamepadURL","ScreenSceneManager","usePreferedLanguage","useScreenScale","getScene","sceneComponent","createPlayer","Math","floor","random","UsersForTest","PlayerButton","onSelected","Pressable","margin","space","tiny","padding","borderRadius","transparency","Image","source","uri","UserSelection","playerList","unboaredDarkTheme","medium","flexWrap","useGamepadScale","CreateGamepadSignIn","launched","setLaunched","useFullscreen","toggleFullscreen","currentPlayer","setCurrentPlayer","newPlayer","GamepadSceneManager","gamepadForScene","TouchableOpacity","Text","ColorView","props","customStyles","rest","loadDeviceState","countA","setCountA","countB","setCountB","countC","setCountC","prev","finalScore","numClick","useDeviceStateProperty","i18n","translations","en","fr","HomeApp","linkTo","useLinkTo","setName","screenURL","setScreenURL","screenGamepadURL","setScreenGamepadURL","setSessionID","setGamepadURL","open","setOpen","setVersion","label","items","setItems","askGameName","slice","includes","marginTop","small","marginBottom","smaller","onChangeText","placeholder","large","error","gameName","computeScreenURL","computeGamepadURL","top","minHeight","minWidth","setValue","Stack","createStackNavigator","AppStack","Navigator","initialRouteName","screenOptions","headerShown","component","ScreenApp","GamepadApp","WebviewScreenApp","WebviewGamepadApp","linking","prefixes","Linking","screens","Home","App","NavigationContainer","documentTitle","formatter","options","GAME_NAME","registerRootComponent"],"mappings":"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","file":"static/js/app.cb75714f.chunk.js","sourcesContent":["/* METADATA */\nexport const GAME_NAME = 'game-runner';\nexport const DEFAULT_SCENE = 'connexion';\nexport const DEBUG = false\n\n/* SOCKET SERVER */\nexport const PROD_SOCKET_SERVER = 'https://socket-server-v03.herokuapp.com/'; //'https://unboared-wss.herokuapp.com/'\n\n/**\n * Add '/gamepad' at the end of the url. \n * If the url is 'http://my-screen.com', then this function \n * will return 'http://my-screen.com/gamepad'\n * @param baseURL the base url\n * @returns the default gamepad url\n */\nexport const computeDefaultGamepadURL = (baseURL: string) => {\n  return baseURL + (baseURL.charAt(baseURL.length - 1) !== '/' ? '/' : '') + 'gamepad';\n}\n\n/**\n * Gets the gamepad URL.\n * @param gameURL the URL of the game to be run\n * @param host the host\n * @param sessionID the sessionID\n * @param wss the websocket server location\n * @returns the gamepad url\n */\nexport const getGamepadURL = (\n  gameURL: string,\n  host: string,\n  sessionID: number | string,\n  wss?: string,\n  version?: string\n) =>\n  `${host}/gamepad/${sessionID}?url=${encodeURIComponent(\n    `${gameURL}`\n  )}${wss ? `&wss=${encodeURIComponent(wss)}` : ''}${version ? `&version=${encodeURIComponent(version)}` : ''}`;\n\n/**\n * Gets the gamepad URL format.\n * @param gameURL the URL of the game to be run\n * @param host the host\n * @param wss the websocket server location\n * @returns the gamepad url format\n */\nexport const getGamepadURLFormat = (\n  gameURL: string,\n  host: string,\n  wss?: string,\n  version?: string\n) => {\n  return getGamepadURL(gameURL, host, '{sessionID}', wss, version);\n};\n\n","import React, { useEffect } from 'react';\nimport { createGlobalStorage } from '@unboared/utils.storage';\n\n\ninterface ScaleState {\n    urlParams: any;\n    setUrlParams: (newParams: any) => void;\n}\n\n\nexport const useURLParams = createGlobalStorage<ScaleState>(\n    (set) => ({\n        urlParams: undefined,\n        setUrlParams: (newParams: any) => {\n            set({ urlParams: newParams })\n        }\n    })\n)\n\n\nexport const useRouteParamsManager = (route) => {\n    const setUrlParams = useURLParams(state => state.setUrlParams)\n\n    useEffect(() => {\n        setUrlParams(route.params)\n    }, [route])\n}","import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, ThemeProvider, unboaredTheme } from '@unboared/base-ui.all';\nimport { useCommunication } from '@unboared/lib';\nimport { DEBUG } from '../config';\n\nconst Gamepad = () => {\n  const { emitAction } = useCommunication();\n\n  return (\n    <ThemeProvider theme={unboaredTheme.dark}>\n      <View\n        style={[\n          styles.center,\n          { backgroundColor: unboaredTheme.dark.backgroundColor },\n        ]}\n      >\n        {DEBUG && (\n          <Button\n            icon=\"settings\"\n            text=\"Test\"\n            onPress={() => emitAction('pressTest', {})}\n          />\n        )}\n        <Button\n          icon=\"play\"\n          text=\"Start game\"\n          onPress={() => emitAction('pressStart', {})}\n        />\n      </View>\n    </ThemeProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  center: {\n    flex: 1,\n    alignSelf: 'stretch',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default Gamepad;\n","import React, { useEffect, useState } from 'react';\nimport { View } from 'react-native';\n\nimport { Button } from '@unboared/base-ui.buttons.button';\nimport { ConnexionInstructions } from '@unboared/design.connexion.connexion_instructions';\nimport { useNormalize, unboaredTheme, Heading } from '@unboared/base-ui.all';\n\nimport { useListener, useUnboared } from '@unboared/lib';\n\nimport { DEBUG } from '../config';\n\n/**\n * The connexion screen.\n */\nconst Screen = () => {\n  const { normalize } = useNormalize();\n  const unboared = useUnboared();\n\n  const startTest = () => {\n    unboared.loadScene('test');\n  };\n\n  useListener('pressTest', startTest);\n\n  const startGame = () => {\n    unboared.loadScene('inGame');\n  };\n\n  useListener('pressStart', startGame);\n\n  return (\n    <View\n      style={{ flex: 1, backgroundColor: unboaredTheme.dark.backgroundColor }}\n    >\n      <ConnexionInstructions\n        url={unboared.getSessionLink()}\n        roomID={unboared.getSessionID()}\n        connectedPlayers={unboared.getPlayers()}\n        masterID={unboared.getUID(unboared.getMasterID()) || ''}\n      />\n      <View\n        style={{\n          position: 'absolute',\n          right: normalize(20),\n          bottom: normalize(20),\n        }}\n      >\n        {DEBUG && (\n          <Button icon=\"settings\" text=\"Test API\" onPress={startTest} />\n        )}\n        <Button icon=\"play\" text=\"Start Game\" onPress={startGame} />\n      </View>\n    </View>\n  );\n};\n\nexport default Screen;\n","import { View } from 'react-native';\n\nimport { Heading, Text } from '@unboared/base-ui.all';\nimport { useDeviceState, usePlayers } from '@unboared/lib';\n\nexport const DisplayAttributes = ({ style }: any) => {\n  const { getDeviceState } = useDeviceState();\n  const {\n    getUsername,\n    getDeviceID,\n    getGamepadIDs,\n    getScreenIDs,\n    getHostID,\n    getPlayer,\n  } = usePlayers();\n\n  const customStyle = [{}, style];\n\n  return (\n    <View style={customStyle}>\n      <Heading type=\"h3\">Me</Heading>\n      <Text>myDeviceID={getDeviceID()}</Text>\n      <Text>hostID={getHostID()}</Text>\n      <Text>state={JSON.stringify(getDeviceState(getDeviceID()))}</Text>\n      <Text>player={JSON.stringify(getPlayer(getDeviceID()))}</Text>\n\n      <Heading type=\"h3\">Screens</Heading>\n      {getScreenIDs().map((id) => (\n        <Text key={id}>\n          {id}=state({JSON.stringify(getDeviceState(id))})\n        </Text>\n      ))}\n      <Heading type=\"h3\">Gamepads</Heading>\n      {getGamepadIDs().map((id) => (\n        <Text key={id}>\n          {id}=state({JSON.stringify(getDeviceState(id))})&username(\n          {getUsername(id)})\n        </Text>\n      ))}\n\n    </View>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nimport {\n  api,\n  onConnect,\n  offConnect,\n  onDisconnect,\n  offDisconnect,\n  onDeviceStateChange,\n  offDeviceStateChange,\n  onPlayerChange,\n  offPlayerChange,\n  onReady,\n  offReady, \n  onSceneChange,\n  offSceneChange,\n  onPause,\n  offPause,\n  onResume,\n  offResume,\n  onMute,\n  offMute,\n} from '@unboared/lib';\n\nimport { Heading, Text } from '@unboared/base-ui.all';\nimport { View } from 'react-native';\n\nexport const EventDisplay = ({ style }: any) => {\n  const customStyle = [{}, style];\n  const [message, setMessage] = useState<string[]>([]);\n\n\n  useEffect(() => {\n    const eventID = onReady(api, (data: any) => {\n      setMessage((state) => [...state, `[onReady] ${JSON.stringify(data)}`]);\n    });\n    return () => offReady(api, eventID);\n  }, []);\n\n  useEffect(() => {\n    const eventID = onSceneChange(api, (data: any) => {\n      setMessage((state) => [...state, `[onSceneChange] ${JSON.stringify(data)}`]);\n    });\n    return () => offSceneChange(api, eventID);\n  }, []);\n\n\n  useEffect(() => {\n    const eventID = onConnect(api, (data: any) => {\n      setMessage((state) => [...state, `[onConnect] ${JSON.stringify(data)}`]);\n    });\n    return () => offConnect(api, eventID);\n  }, []);\n\n  useEffect(() => {\n    const eventID = onDisconnect(api, (data: any) => {\n      setMessage((state) => [\n        ...state,\n        `[onDisconnect] ${JSON.stringify(data)}`,\n      ]);\n    });\n    return () => offDisconnect(api, eventID);\n  }, []);\n\n  useEffect(() => {\n    const eventID = onPlayerChange(api, (data: any) => {\n      setMessage((state) => [\n        ...state,\n        `[onPlayerChange] ${JSON.stringify(data)}`,\n      ]);\n    });\n    return () => offPlayerChange(api, eventID);\n  }, []);\n\n  useEffect(() => {\n    const eventID = onDeviceStateChange(api, (data: any) => {\n      setMessage((state) => [\n        ...state,\n        `[onDeviceStateChange] ${JSON.stringify(data)}`,\n      ]);\n    });\n    return () => offDeviceStateChange(api, eventID);\n  }, []);\n\n  useEffect(() => {\n    const eventID = onMute(api, (data: any) => {\n      setMessage((state) => [...state, `[onMute] ${JSON.stringify(data)}`]);\n    });\n    return () => offMute(api, eventID);\n  }, []);\n\n  useEffect(() => {\n    const eventID = onPause(api, (data: any) => {\n      setMessage((state) => [...state, `[onPause] ${JSON.stringify(data)}`]);\n    });\n    return () => offPause(api, eventID);\n  }, []);\n\n  useEffect(() => {\n    const eventID = onResume(api, (data: any) => {\n      setMessage((state) => [...state, `[onResume] ${JSON.stringify(data)}`]);\n    });\n    return () => offResume(api, eventID);\n  }, []);\n\n  return (\n    <View style={customStyle}>\n      <Heading type=\"h3\" text=\"Events\" />\n      {message.map((msg, index) => (\n        <Text key={index}>{msg}</Text>\n      ))}\n    </View>\n  );\n};\n","import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport {\n  Button,\n  ThemeProvider,\n  unboaredTheme,\n  useNormalize,\n} from '@unboared/base-ui.all';\nimport { useCommunication } from '@unboared/lib';\n\nimport { DisplayAttributes } from './components/attributeDisplay';\nimport { EventDisplay } from './components/eventDisplay';\n\nconst Gamepad = () => {\n  const { emitAction } = useCommunication();\n  const { normalize } = useNormalize();\n\n  return (\n    <ThemeProvider theme={unboaredTheme.dark}>\n      <View\n        style={[\n          styles.center,\n          {\n            flexDirection: 'row',\n            backgroundColor: unboaredTheme.dark.backgroundColor,\n          },\n        ]}\n      >\n        <View style={{ flex: 1, flexShrink: 1 }}>\n          <DisplayAttributes />\n        </View>\n        <View style={{ flex: 1, flexShrink: 1 }}>\n          <EventDisplay />\n        </View>\n\n        <View\n          style={{\n            position: 'absolute',\n            left: normalize(20),\n            bottom: normalize(20),\n          }}\n        >\n          <Button\n            icon=\"return\"\n            text=\"Back\"\n            onPress={() => emitAction('pressBack', {})}\n          />\n        </View>\n      </View>\n    </ThemeProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  center: {\n    flex: 1,\n    alignSelf: 'stretch',\n  },\n});\n\nexport default Gamepad;\n","import React, { useEffect, useState } from 'react';\nimport { View } from 'react-native';\nimport { Button } from '@unboared/base-ui.buttons.button';\nimport {\n  useNormalize,\n  unboaredTheme,\n  Heading,\n  Text,\n} from '@unboared/base-ui.all';\n\nimport { api, useListener, usePlayers, useScene } from '@unboared/lib';\n\nimport { DEFAULT_SCENE } from '../config';\nimport { DisplayAttributes } from './components/attributeDisplay';\nimport { EventDisplay } from './components/eventDisplay';\n\nconst useConnexionStatus = () => {\n  const { getDeviceID } = usePlayers();\n  const [isConnected, setIsConnected] = useState(true);\n\n  useEffect(() => {\n    const eventID = api().onDisconnect((deviceID: string) => {\n      if (deviceID === getDeviceID()) {\n        setIsConnected(false);\n      }\n    });\n    return () => api().offDisconnect(eventID);\n  }, []);\n\n  useEffect(() => {\n    const eventID = api().onConnect((deviceID: string) => {\n      if (deviceID === getDeviceID()) {\n        setIsConnected(true);\n      }\n    });\n    return () => api().offConnect(eventID);\n  }, []);\n\n  return isConnected;\n};\n\n/**\n * The connexion screen.\n */\nconst Screen = () => {\n  const { normalize } = useNormalize();\n\n  const { loadScene } = useScene();\n\n  const backToHome = () => {\n    loadScene(DEFAULT_SCENE);\n  };\n\n  useListener('pressBack', backToHome);\n\n  const screenConnected = useConnexionStatus();\n\n  if (!screenConnected) {\n    return (\n      <View\n        style={{\n          flex: 1,\n          alignItems: 'center',\n          justifyContent: 'center',\n          backgroundColor: unboaredTheme.dark.backgroundColor,\n        }}\n      >\n        <Heading text=\"Bad internet connection\" />\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: 'row',\n        backgroundColor: unboaredTheme.dark.backgroundColor,\n      }}\n    >\n      <View style={{ flex: 1, flexShrink: 1 }}>\n        <DisplayAttributes />\n      </View>\n      <View style={{ flex: 1, flexShrink: 1 }}>\n        <EventDisplay />\n      </View>\n\n      <View\n        style={{\n          position: 'absolute',\n          left: normalize(20),\n          bottom: normalize(20),\n        }}\n      >\n        <Button icon=\"return\" text=\"Back\" onPress={backToHome} />\n      </View>\n    </View>\n  );\n};\n\nexport default Screen;\n","import React, { useRef, useEffect, useCallback, useState } from 'react';\n\nimport { useTranslate, FullPageOverlay } from '@unboared/base-ui.all';\nimport { useLanguage } from '@unboared/utils.language';\nimport { UnboaredPageLoader } from '@unboared/design.loaders';\nimport { api, useListener, usePlayers, useCommunication } from '@unboared/lib';\n\nexport const GameRunner = ({ title, src }: { title: string; src: string }) => {\n  const iframeRef = useRef(null);\n  const language = useLanguage((state) => state.language);\n  const currentScene = useRef('home');\n  const { translate } = useTranslate();\n  const [gameLoaded, setGameLoaded] = useState(false);\n\n  const {\n    getMasterID,\n    getUID,\n    getColor,\n    getUsername,\n    getAvatar,\n    isScreen,\n    getPlayer,\n    getDeviceID,\n    getPlayers,\n  } = usePlayers();\n\n  const type = isScreen() ? 'screen' : 'gamepad';\n  const me = {\n    uid: getUID(),\n    username: getUsername(),\n    avatar: getAvatar(),\n    color: getColor(),\n  };\n\n  const { send, emitAction, broadcast } = useCommunication();\n\n  // Envoie un message au Iframe sous-jacent\n  // -- ex : { }\n  const postToWebView = useCallback(\n    (message: any) => {\n      if (!iframeRef.current) return;\n      iframeRef.current.contentWindow.postMessage(message, src);\n    },\n    [iframeRef]\n  );\n\n  // Recois les messages du Iframe sous-jacent\n  // -- ex : { }\n  useEffect(() => {\n    const handler = (e: any) => {\n      console.log(`# New message from ${e.origin}`);\n      console.log(`--> ${JSON.stringify(e.data)}`);\n      let data = e.data;\n      // if (e.origin !== src) return;\n      if (data.action === '__onReady__') {\n        setGameLoaded(true);\n        postToWebView({\n          name: '__onReady__',\n          players: getPlayers(),\n          me: me,\n          masterID: api().getUID(api().getMasterID()),\n          scenario: {\n            game: title,\n            scenario: 'home',\n            scenarioComponent: undefined,\n          },\n          type: type,\n          roomID: api().getSessionID(),\n          language: language,\n        });\n        emitAction('__askChildState__', { from: getDeviceID() });\n      } else if (data.action === 'send') {\n        if (data.deviceID !== '') {\n          if (data.name == '__set__') {\n            broadcast('__setGlobalState__', data);\n          } else {\n            send(data['deviceID'], '__message__', data);\n          }\n        } else {\n          emitAction('__message__', data);\n        }\n      } else if (data.action === 'sendServer') {\n        if (data.name === 'changeScenario') {\n          broadcast('__changeWebviewScenario__', {\n            game: data.game,\n            scenario: data.scenario,\n          });\n        }\n        // sendServer(data.name, data);\n      }\n    };\n\n    window.addEventListener('message', handler);\n\n    return () => window.removeEventListener('message', handler);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Ecoute les messages arrivant des gamepads et les transfert au jeu sous-jacent\n  // -- ex : { }\n  useListener(\n    '__message__',\n    (data) => {\n      postToWebView(data);\n    },\n    []\n  );\n\n  useListener(\n    '__setGlobalState__',\n    (data: { game: string; scenario: string }) => {\n      if (!api().isScreen(api().getDeviceID())) {\n        postToWebView({\n          name: '__set__',\n          ...data,\n        });\n      }\n    }\n  );\n\n  useListener('__childState__', (data: any) => {\n    postToWebView({\n      name: 'changeScenario',\n      game: title,\n      scenario: data.scene,\n    });\n  });\n\n  useListener('__askChildState__', (data: any) => {\n    send(data.from, '__childState__', { scene: currentScene.current });\n  });\n\n  useListener(\n    '__changeWebviewScenario__',\n    (data: { game: string; scenario: string }) => {\n      if (!api().isScreen(api().getDeviceID())) {\n        postToWebView({\n          name: 'changeScenario',\n          ...data,\n        });\n      } else {\n        currentScene.current = data.scenario;\n      }\n    },\n    [currentScene]\n  );\n\n  useEffect(() => {\n    const eventID = api().onConnect((deviceID: string) => {\n      postToWebView({\n        name: '__onConnect__',\n        uid: api().getUID(deviceID),\n        username: api().getUsername(deviceID),\n        avatar: api().getAvatar(deviceID),\n        color: api().getColor(deviceID),\n      });\n      postToWebView({\n        name: '__onMasterID__',\n        masterID: api().getUID(api().getMasterID()),\n      });\n    });\n    return () => api().offConnect(eventID);\n  }, []);\n\n  useEffect(() => {\n    const eventID = api().onDisconnect((deviceID: string) => {\n      postToWebView({\n        name: '__onDisconnect__',\n        deviceID: deviceID,\n        masterID: api().getUID(api().getMasterID()),\n      });\n    });\n    return () => api().offDisconnect(eventID);\n  }, []);\n\n  return (\n    <>\n      <FullPageOverlay active={!gameLoaded}>\n        <UnboaredPageLoader infos={translate('screen.loading.gameIFrame')} />\n      </FullPageOverlay>\n      <iframe\n        ref={iframeRef}\n        title={title}\n        src={src}\n        width=\"100%\"\n        height=\"100%\"\n        frameBorder=\"0\"\n      />\n    </>\n  );\n};\n","import React, { useEffect, useCallback, useState } from 'react';\nimport { api, useListener, usePlayers } from '@unboared/lib';\nimport { useLanguage } from '@unboared/utils.language';\n\nconst TRANSMIT_CODE = 'unboared::webview::transmit';\n\n/**\n * Bridge between the platform and the WebView game.\n * @param gameName le nom du jeu sous jacent\n * @param src l'url vers le jeu\n * @returns la référence vers le webview, s'il le webview (donc le jeu) est chargé\n */\nexport const useWebViewPlugin = (webviewRef: any, src: string) => {\n  // Instanciate a reference to the webview\n  const [webviewLoaded, setWebviewLoaded] = useState(false);\n  const language = useLanguage((state) => state.language);\n\n  const { getPlayer } = usePlayers();\n\n  // Envoie un message au Webview sous-jacent\n  // -- ex : { }\n  const postToWebView = useCallback(\n    (message: any) => {\n      if (!webviewRef.current) return;\n      webviewRef.current.contentWindow.postMessage(message, src);\n    },\n    [webviewRef]\n  );\n\n  /* Listen from onConnect method from parent and delegates to the child */\n  useEffect(() => {\n    const eventID = api().onConnect((deviceID: string) => {\n      postToWebView({\n        action: 'connect',\n        data: {\n          deviceID,\n          data: {\n            state: api().getDeviceState(deviceID),\n            player: getPlayer(deviceID),\n          },\n        },\n      });\n    });\n    return () => api().offConnect(eventID);\n  }, []);\n\n  /* Listen from onDisonnect method from parent and delegates to the child */\n  useEffect(() => {\n    const eventID = api().onDisconnect((deviceID: string) => {\n      postToWebView({\n        action: 'disconnect',\n        data: { deviceID },\n      });\n    });\n    return () => api().offDisconnect(eventID);\n  }, []);\n\n  /* Listen from on method from parent and delegates to the child */\n  useEffect(() => {\n    const eventID = api().onPlayerChange((deviceID: string) => {\n      postToWebView({\n        action: 'setPlayer',\n        data: {\n          deviceID,\n          player: getPlayer(deviceID),\n        },\n      });\n    });\n    return () => api().offPlayerChange(eventID);\n  }, []);\n\n  /* Listen from on method from parent and delegates to the child */\n  useEffect(() => {\n    const eventID = api().onDeviceStateChange((deviceID: string) => {\n      postToWebView({\n        action: 'setDeviceState',\n        data: {\n          deviceID,\n          state: api().getDeviceState(deviceID),\n        },\n      });\n    });\n    return () => api().offDeviceStateChange(eventID);\n  }, []);\n\n  /* Listen from on method from parent and delegates to the child */\n  useEffect(() => {\n    const eventID = api().onDeviceStatePropertyChange(\n      (deviceID: string, key: string) => {\n        postToWebView({\n          action: 'onDeviceStatePropertyChange',\n          data: {\n            deviceID,\n            key,\n            value: api().getDeviceStateProperty(deviceID, key),\n          },\n        });\n      }\n    );\n    return () => api().offDeviceStatePropertyChange(eventID);\n  }, []);\n\n  // Transmit child level messages without interfering\n  // with the parent application\n  useListener(TRANSMIT_CODE, postToWebView, []);\n\n  // Receive messages from the underlying WebView (the child app)\n  // and process it\n  // -- ex : { }\n  useEffect(() => {\n    const webviewMessageHandler = (event: any) => {\n      let data = event.data;\n      if (data.action === 'onReady') {\n        setWebviewLoaded(true);\n        //\n        let devices: Array<any> = [];\n        for (let screenID of api().getScreenIDs()) {\n          devices.push({\n            deviceID: screenID,\n            data: {\n              player: getPlayer(screenID),\n              state: api().getDeviceState(screenID),\n            },\n          });\n        }\n\n        for (let gamepadID of api().getGamepadIDs()) {\n          devices.push({\n            deviceID: gamepadID,\n            data: {\n              player: getPlayer(gamepadID),\n              state: api().getDeviceState(gamepadID),\n            },\n          });\n        }\n\n        postToWebView({\n          action: 'ready',\n          data: {\n            hostID: api().getHostID(),\n            myDeviceID: api().getDeviceID(),\n            devices: devices,\n            session: {\n              id: api().getSessionID(),\n              url: api().getSessionLink(),\n            },\n            language: language,\n          },\n        });\n      } else if (data.action == 'send') {\n        api().send(data.to, TRANSMIT_CODE, data.data);\n      } else if (data.action == 'broadcast') {\n        api().broadcast(TRANSMIT_CODE, data.data);\n      } else if (data.action == 'navigateToHome') {\n        api().navigateToHome();\n      } else if (data.action == 'navigateTo') {\n        api().navigateTo(data.data.url);\n        //   } else if (data.action == \"showAd\") {\n        //     api().showAd();\n        //   } else if (data.action == \"requestHighScores\") {\n        //     api().requestHighScores(data.level_name, data.level_version, data.uids, data.ranks, data.total, data.top);\n        //   } else if (data.action == \"storeHighScore\") {\n        //     api().storeHighScore(data.level_name, data.level_version, data.score, data.uid, data.data, data.score_string);\n        //   } else if (data.action == \"requestPersistentData\") {\n        //     api().requestPersistentData(data.uids);\n        //   } else if (data.action == \"storePersistentData\") {\n        //     api().storePersistentData(data.key, data.value, data.uid);\n        //   } else if (data.action == \"debug\") {\n        //     console.log(\"debug message:\", data.data);\n        //   } else if (\n        //     data.action === 'requestHighScores'\n        //     ) {\n        //       // Call async function to get highscores\n        //       const requestHighscpores = async () => {\n        //     return {};\n        //   };\n        //   requestHighscores().then((highscores) => {\n        //     postToWebView({\n        //       action: 'onHighScores',\n        //       data: highscores,\n        //     });\n        //   });\n        // }\n      } else if (data.action == 'debug') {\n        console.log('[Debug] Debug message:', data.data);\n      }\n    };\n\n    //\n    window.addEventListener('message', webviewMessageHandler);\n\n    return () => window.removeEventListener('message', webviewMessageHandler);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return { isReady: webviewLoaded };\n};\n","import { GameRunnerType, GameRunnerVersion } from './types'\nimport { GameRunner as GameRunner0_1_0 } from './v0.1.0/game_runner'\nimport { GameRunner as GameRunner0_3_0 } from './v0.3.0/game_runner'\n\nexport const GameRunnerMap: Map<GameRunnerVersion, GameRunnerType> = new Map([\n  ['0.1', GameRunner0_1_0],\n  ['0.3', GameRunner0_3_0],\n])\n\nexport const GameRunnerList = [...GameRunnerMap.keys()]\n","import React, { useRef } from 'react';\n\nimport { UnboaredPageLoader } from '@unboared/design.loaders';\nimport { useTranslate, FullPageOverlay } from '@unboared/base-ui.all';\nimport { useWebViewPlugin } from './useWebViewPlugin';\n\nexport const GameRunner = ({ title, src }: { title: string; src: string }) => {\n  const webviewRef = useRef(null);\n  const { translate } = useTranslate();\n  const { isReady } = useWebViewPlugin(webviewRef, src);\n\n  return (\n    <>\n      <FullPageOverlay active={!isReady}>\n        <UnboaredPageLoader infos={translate('screen.loading.gameIFrame')} />\n      </FullPageOverlay>\n      <iframe\n        ref={webviewRef}\n        title={title}\n        src={src}\n        width=\"100%\"\n        height=\"100%\"\n        frameBorder=\"0\"\n      />\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { GameRunnerProps, GameRunnerVersion } from \"./types\";\nimport { GameRunnerList, GameRunnerMap } from \"./game_runner_list\";\n\nexport const GameRunner = ({ title, src, version = '0.1' }: GameRunnerProps) => {\n    const Runner = GameRunnerMap.get(GameRunnerList.indexOf(version) >= 0 ? version : '0.1')\n    return <Runner title={title} src={src} />\n}","import React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport { useURLParams } from \"../components/useURLParams\";\nimport { GameRunner } from '../components/game_runner'\nimport { ThemeProvider, unboaredTheme } from \"@unboared/base-ui.all\";\n\nconst Gamepad = () => {\n    const params = useURLParams(state => state.urlParams)\n\n    return (\n        <ThemeProvider theme={unboaredTheme.dark}>\n            <View style={{ flex: 1, backgroundColor: unboaredTheme.dark.backgroundColor }}>\n                <GameRunner title={params.name} src={params.url} version={params.version} />\n            </View>\n        </ThemeProvider>\n    )\n}\n\nexport default Gamepad;","import React, { useEffect, useState } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nimport { ThemeProvider, unboaredTheme } from '@unboared/base-ui.all'\nimport { useURLParams } from '../components/useURLParams'\nimport { GameRunner } from '../components/game_runner'\n\nconst Screen = () => {\n    const params = useURLParams(state => state.urlParams)\n\n    return (\n        <ThemeProvider theme={unboaredTheme.dark}>\n            <View style={{ flex: 1, backgroundColor: unboaredTheme.dark.backgroundColor }}>\n                <GameRunner title={params.name} src={params.url} version={params.version} />\n            </View>\n        </ThemeProvider>\n    )\n}\n\nexport default Screen;","import React from \"react\";\n\nimport ConnexionGamepad from '../Connexion/Gamepad'\nimport ConnexionScreen from '../Connexion/Screen'\n\nimport TestAPIGamepad from '../TestAPI/Gamepad'\nimport TestAPIScreen from '../TestAPI/Screen'\n\nimport RunnerGamepad from '../Runner/Gamepad'\nimport RunnerScreen from '../Runner/Screen'\n\nconst SCENE = {\n    \"connexion\": {\n        gamepad: <ConnexionGamepad />,\n        screen: <ConnexionScreen />,\n    },\n    \"inGame\": {\n        gamepad: <RunnerGamepad />,\n        screen: <RunnerScreen />\n    },\n    \"test\": {\n        gamepad: <TestAPIGamepad />,\n        screen: <TestAPIScreen />,\n    },\n}\n\nexport const gamepadForScene = (scene) => {\n    return SCENE[scene].gamepad\n}\n\nexport const screenForScene = (scene) => {\n    return SCENE[scene].screen\n}","import React, { useEffect } from 'react';\nimport { Platform, View } from 'react-native';\n\n/* Import UI elements */\nimport { UnboaredPageLoader } from '@unboared/design.loaders';\nimport { usePreferedLanguage } from '@unboared/utils.language';\nimport { useScreenScale } from '@unboared/utils.scale';\n\n/* Import Unboared lib */\nimport { UnboaredGame, CommunicationConfig, useScene } from '@unboared/lib';\n\n/* Import config and utils */\nimport { computeDefaultGamepadURL, getGamepadURLFormat } from './config/Const';\nimport { DEFAULT_SCENE, GAME_NAME, PROD_SOCKET_SERVER } from './config/Const';\nimport { useRouteParamsManager, useURLParams } from './components/useURLParams';\n\n/* Import screens */\nimport { screenForScene } from './config';\n\n/* The hosting application  */\nvar host =\n  Platform.OS === 'web'\n    ? window.location.protocol + '//' + window.location.host\n    : 'https://run.unboared.com/';\n\n/* The main screen app */\nexport default ({ route }: any) => {\n  useRouteParamsManager(route); // manage url parameters\n  const urlParams = useURLParams((state) => state.urlParams);\n\n  if (!urlParams) {\n    return <UnboaredPageLoader infos=\"Loading parameters...\" />;\n  }\n\n  return (\n    <UnboaredGame\n      name={GAME_NAME}\n      initialScene={DEFAULT_SCENE}\n      loader={<UnboaredPageLoader infos=\"Connexion to the server...\" />}\n      config={CommunicationConfig.getSocketIO(\n        'screen',\n        urlParams.wss || PROD_SOCKET_SERVER,\n        {\n          url: getGamepadURLFormat(\n            urlParams.gamepadURL || computeDefaultGamepadURL(urlParams.url),\n            host,\n            urlParams.wss,\n            urlParams.version\n          ),\n        }\n      )}\n    >\n      <ScreenSceneManager />\n    </UnboaredGame>\n  );\n};\n\nexport const ScreenSceneManager = () => {\n  usePreferedLanguage();\n  useScreenScale();\n\n  const { getScene, sceneComponent, loadScene } = useScene();\n\n  useEffect(() => {\n    loadScene(DEFAULT_SCENE);\n  }, []);\n\n  if (!getScene()) {\n    return <UnboaredPageLoader infos=\"Loading scene\" />;\n  }\n\n  if (sceneComponent) {\n    return sceneComponent;\n  }\n\n  return screenForScene(getScene());\n};\n","import { Player } from \"@unboared/lib\"\n\nconst createPlayer = (username: string, avatar: string): Player => {\n    const uuid = Math.floor(Math.random() * 100000000)\n\n    return { uid: `${uuid}`, username, avatar, color: '' }\n}\n\n\nexport const UsersForTest = [\n    createPlayer(\"Marion\", \"https://avatars.dicebear.com/api/adventurer/198.svg\"),\n    createPlayer(\"Nelly\", \"https://avatars.dicebear.com/api/adventurer/1.svg\"),\n    createPlayer(\"Regis\", \"https://avatars.dicebear.com/api/adventurer/1&2.svg\"),\n    createPlayer(\"Dorian\", \"https://avatars.dicebear.com/api/adventurer/12.svg\"),\n    createPlayer(\"Mark\", \"https://avatars.dicebear.com/api/adventurer/12aadzesdfd54s.svg\"),\n    createPlayer(\"Nolwenn\", \"https://avatars.dicebear.com/api/adventurer/1dzeqdsef.svg\"),\n    createPlayer(\"Bob\", \"https://avatars.dicebear.com/api/adventurer/333.svg\"),\n    createPlayer(\"Geraldine\", \"https://avatars.dicebear.com/api/adventurer/12dsqd.svg\"),\n    createPlayer(\"Claudine\", \"https://avatars.dicebear.com/api/adventurer/claudine.svg\"),\n]","import React from 'react';\nimport { Image, Pressable, View } from 'react-native';\nimport {\n  Heading,\n  normalize,\n  space,\n  transparency,\n  unboaredDarkTheme,\n  useNormalize,\n} from '@unboared/base-ui.all';\n\nimport { UsersForTest } from '../../config/UsersForTest';\n\nconst PlayerButton = ({ player, onSelected }: any) => {\n  const { normalize } = useNormalize();\n  return (\n    <Pressable\n      style={{\n        margin: normalize(space.tiny),\n        padding: normalize(space.tiny),\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: normalize(10),\n        backgroundColor: transparency('dark', 0.2),\n      }}\n      onPress={() => onSelected(player)}\n    >\n      <Image\n        style={{\n          width: normalize(40),\n          height: normalize(40),\n        }}\n        source={{\n          uri: player.avatar,\n        }}\n      />\n      <Heading type=\"h5\" text={player.username} />\n    </Pressable>\n  );\n};\n\nexport const UserSelection = ({ onSelected }: any) => {\n  const { normalize } = useNormalize();\n  const playerList = UsersForTest;\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: 'flex-end',\n        backgroundColor: unboaredDarkTheme.backgroundColor,\n      }}\n    >\n      <View\n        style={{\n          padding: normalize(space.medium),\n          flexDirection: 'row',\n          flexWrap: 'wrap',\n          justifyContent: 'space-around',\n        }}\n      >\n        {playerList.map((player, index) => (\n          <PlayerButton key={index} player={player} onSelected={onSelected} />\n        ))}\n      </View>\n    </View>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { useFullscreen } from '@unboared/utils.fullscreen';\nimport { UnboaredPageLoader } from '@unboared/design.loaders';\nimport { UserSelection } from './components/user_selection';\n\nimport { DEFAULT_SCENE, GAME_NAME, PROD_SOCKET_SERVER } from './config/Const';\nimport { useRouteParamsManager, useURLParams } from './components/useURLParams';\n\nimport ConnexionGamepad from './Connexion/Gamepad';\n// import RunnerGamepad from './Runner/Gamepad';\n\nimport { useGamepadScale } from '@unboared/utils.scale';\nimport { Player } from '@unboared/native.types';\nimport { CommunicationConfig, UnboaredGame, useScene } from '@unboared/lib';\nimport { gamepadForScene } from './config';\n\nexport default ({ route }: any) => {\n  useGamepadScale();\n  useRouteParamsManager(route);\n  const urlParams = useURLParams((state) => state.urlParams);\n\n  if (!urlParams) {\n    return <UnboaredPageLoader infos=\"Loading parameters...\" />;\n  }\n\n  return <CreateGamepadSignIn />;\n};\n\nexport const CreateGamepadSignIn = () => {\n  const [launched, setLaunched] = useState(false);\n  const { toggleFullscreen } = useFullscreen();\n\n  const [currentPlayer, setCurrentPlayer] = useState<any>();\n  const urlParams = useURLParams((state) => state.urlParams);\n\n  const launchUI = (newPlayer: Player) => {\n    setLaunched(true);\n    // toggleFullscreen();\n    setCurrentPlayer(newPlayer);\n  };\n\n  if (!launched) {\n    return <UserSelection onSelected={launchUI} />;\n  }\n\n  return (\n    <UnboaredGame\n      name={GAME_NAME}\n      initialScene={DEFAULT_SCENE}\n      loader={<UnboaredPageLoader infos=\"Connexion to the server...\" />}\n      config={CommunicationConfig.getSocketIO(\n        'gamepad',\n        urlParams.wss || PROD_SOCKET_SERVER,\n        {\n          id: urlParams.sessionID,\n        },\n        currentPlayer\n      )}\n    >\n      <GamepadSceneManager />\n    </UnboaredGame>\n  );\n};\n\nexport const GamepadSceneManager = () => {\n  const scene = useScene().getScene();\n\n  if (!scene) {\n    return <UnboaredPageLoader infos=\"Loading scene\" />;\n  }\n\n  return gamepadForScene(scene);\n};\n","import React from 'react';\nimport { View, StyleSheet, TouchableOpacity, Text } from 'react-native';\n\nimport { useCommunication } from '@unboared/lib';\n\nconst Gamepad = () => {\n  const { emitAction } = useCommunication();\n\n  return (\n    <View style={styles.center}>\n      <TouchableOpacity\n        style={[styles.center, { backgroundColor: '#FAF' }]}\n        onPress={() => emitAction('pressA')}\n      >\n        <Text>A</Text>\n      </TouchableOpacity>\n      <TouchableOpacity\n        style={[styles.center, { backgroundColor: '#AFF' }]}\n        onPress={() => emitAction('pressB')}\n      >\n        <Text>B</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  center: {\n    flex: 1,\n    alignSelf: 'stretch',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default Gamepad;\n","import React from \"react\"\nimport { View } from \"react-native\"\n\ntype ColorViewProps = {\n    /* The color of the View */\n    color: string,\n\n    /* The style of the View */\n    style?: any,\n\n    /* Children components */\n    children?: any,\n}\n\nconst ColorView = (props: ColorViewProps) => {\n\n    const {\n        color,\n        style: customStyles,\n        ...rest\n    } = props\n\n    const style = [customStyles, { backgroundColor: color }]\n\n    return <View style={style} {...rest} />\n}\n\nexport default ColorView;","import React from 'react';\nimport { Text, View, StyleSheet, Pressable } from 'react-native';\n\nimport { useTranslate } from '@unboared/base-ui.all';\nimport { useListener, useScene } from '@unboared/lib';\n\nimport ColorView from '../components/ColorView';\n\nconst Screen = () => {\n  const { translate } = useTranslate();\n  const { loadScene, getScene } = useScene();\n  const startGame = () => loadScene('game');\n\n  useListener('pressA', startGame);\n\n  return (\n    <View style={styles.center}>\n      <ColorView style={styles.center} color=\"#FFF\">\n        <Text>Scene : {getScene()}</Text>\n        <Text>{translate('screen.home.startText')}</Text>\n      </ColorView>\n      <Pressable\n        style={[styles.center, { backgroundColor: '#FAF' }]}\n        onPress={startGame}\n      >\n        <Text>{translate('screen.home.clickA')}</Text>\n      </Pressable>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  center: {\n    flex: 1,\n    alignSelf: 'stretch',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default Screen;\n","import React from 'react';\nimport { View, StyleSheet, TouchableOpacity, Text } from 'react-native';\n\nimport { useCommunication } from '@unboared/lib';\n\nconst Gamepad = () => {\n  const { emitAction } = useCommunication();\n  return (\n    <View style={styles.center}>\n      <TouchableOpacity\n        style={[styles.center, { backgroundColor: '#FAF' }]}\n        onPress={() => emitAction('pressA')}\n      >\n        <Text>A</Text>\n      </TouchableOpacity>\n      <TouchableOpacity\n        style={[styles.center, { backgroundColor: '#AFF' }]}\n        onPress={() => emitAction('pressB')}\n      >\n        <Text>B</Text>\n      </TouchableOpacity>\n      <TouchableOpacity\n        style={[styles.center, { backgroundColor: '#FFA' }]}\n        onPress={() => emitAction('pressC')}\n      >\n        <Text>C</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  center: {\n    flex: 1,\n    alignSelf: 'stretch',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default Gamepad;\n","import React, { useEffect, useState } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\nimport { useTranslate } from '@unboared/base-ui.all';\nimport {\n  useDeviceState,\n  useListener,\n  usePlayers,\n  useScene,\n} from '@unboared/lib';\n\nimport { NUM_CLICK_TO_WIN } from '../config/Const';\nimport ColorView from '../components/ColorView';\n\nconst Screen = () => {\n  const { getScene, loadScene } = useScene();\n  const { loadDeviceState } = useDeviceState();\n  const { getDeviceID } = usePlayers();\n  const { translate } = useTranslate();\n\n  const [countA, setCountA] = useState(0);\n  const [countB, setCountB] = useState(0);\n  const [countC, setCountC] = useState(0);\n\n  useListener('pressA', () => setCountA((prev) => prev + 1));\n  useListener('pressB', () => setCountB((prev) => prev + 1));\n  useListener('pressC', () => setCountC((prev) => prev + 1));\n\n  useEffect(() => {\n    const checkWin = () => {\n      if (\n        countA >= NUM_CLICK_TO_WIN &&\n        countB >= NUM_CLICK_TO_WIN &&\n        countC >= NUM_CLICK_TO_WIN\n      ) {\n        loadDeviceState(getDeviceID(), {\n          finalScore: countA + countB + countC,\n        });\n        loadScene('endgame');\n      }\n    };\n    checkWin();\n  }, [countA, countB, countC]);\n\n  return (\n    <View style={styles.center}>\n      <ColorView style={styles.center} color=\"#FFF\">\n        <Text>Scene : {getScene()}</Text>\n        <Text>\n          {translate('screen.game.help', { numClick: NUM_CLICK_TO_WIN })}{' '}\n        </Text>\n      </ColorView>\n      <ColorView style={styles.center} color=\"#FAF\">\n        <Text>\n          {translate('screen.game.clickA')} : {countA}\n        </Text>\n      </ColorView>\n      <ColorView style={styles.center} color=\"#AFF\">\n        <Text>\n          {translate('screen.game.clickB')} : {countB}\n        </Text>\n      </ColorView>\n      <ColorView style={styles.center} color=\"#FFA\">\n        <Text>\n          {translate('screen.game.clickC')} : {countC}\n        </Text>\n      </ColorView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  center: {\n    flex: 1,\n    alignSelf: 'stretch',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default Screen;\n","/* METADATA */\nexport const GAME_NAME = \"webview\";\n\n/* GAME CONFIGS */\nexport const DEFAULT_SCENE = 'home';\n\n\n/* CONFIGS */\nexport const NUM_CLICK_TO_WIN = 5","import React from 'react';\nimport { TouchableOpacity, View, StyleSheet, Text } from 'react-native';\n\nimport { useCommunication } from '@unboared/lib';\n\nconst Gamepad = () => {\n  const { emitAction } = useCommunication();\n  return (\n    <View style={styles.center}>\n      <TouchableOpacity\n        style={[styles.center, { backgroundColor: '#FAF' }]}\n        onPress={() => emitAction('pressA')}\n      >\n        <Text>A</Text>\n      </TouchableOpacity>\n      <TouchableOpacity\n        style={[styles.center, { backgroundColor: '#AFF' }]}\n        onPress={() => emitAction('pressB')}\n      >\n        <Text>B</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  center: {\n    flex: 1,\n    alignSelf: 'stretch',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default Gamepad;\n","import React, { useState } from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\nimport { useTranslate } from '@unboared/base-ui.all';\nimport {\n  useScene,\n  useListener,\n  useDeviceStateProperty,\n  usePlayers,\n} from '@unboared/lib';\n\nimport ColorView from '../components/ColorView';\n\nconst Screen = () => {\n  const { translate } = useTranslate();\n\n  const { getDeviceStateProperty } = useDeviceStateProperty();\n  const { getDeviceID } = usePlayers();\n  const { getScene, loadScene } = useScene();\n\n  const finalScore = getDeviceStateProperty(getDeviceID(), 'finalScore');\n\n  useListener('pressA', () => loadScene('home'));\n  useListener('pressB', () => loadScene('game'));\n\n  return (\n    <View style={styles.center}>\n      <ColorView style={styles.center} color=\"#FFF\">\n        <Text>Scene : {getScene()}</Text>\n        <Text>\n          {translate('screen.endgame.title')} : {finalScore} (\n          {finalScore === 15 ? 'Congratulations' : 'Try again'})\n        </Text>\n      </ColorView>\n      <ColorView style={styles.center} color=\"#FAF\">\n        <Text>A : {translate('screen.endgame.goHome')}</Text>\n      </ColorView>\n      <ColorView style={styles.center} color=\"#AFF\">\n        <Text>B : {translate('screen.endgame.restart')}</Text>\n      </ColorView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  center: {\n    flex: 1,\n    alignSelf: 'stretch',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default Screen;\n","import React from \"react\";\n\nimport HomeGamepad from '../Home/Gamepad'\nimport HomeScreen from '../Home/Screen'\n\nimport GameGamepad from '../Game/Gamepad'\nimport GameScreen from '../Game/Screen'\n\nimport EndgameGamepad from '../Endgame/Gamepad'\nimport EndgameScreen from '../Endgame/Screen'\n\nconst SCENE = {\n    \"home\": {\n        gamepad: <HomeGamepad />,\n        screen: <HomeScreen />,\n    },\n    \"game\": {\n        gamepad: <GameGamepad />,\n        screen: <GameScreen />,\n    },\n    \"endgame\": {\n        gamepad: <EndgameGamepad />,\n        screen: <EndgameScreen />\n    }\n}\n\nexport const gamepadForScene = (scene) => {\n    return SCENE[scene].gamepad\n}\n\nexport const screenForScene = (scene) => {\n    return SCENE[scene].screen\n}","import React, { useEffect } from 'react';\nimport { Text } from 'react-native';\n\nimport { i18n } from '@unboared/base-ui.all';\nimport { UnboaredPageLoader } from '@unboared/design.loaders';\n\nimport { UnboaredGame, useScene } from '@unboared/lib';\n\nimport { en, fr } from './translations';\nimport { DEFAULT_SCENE, GAME_NAME } from './config/Const';\nimport { screenForScene } from './config/Scene';\n\ni18n.translations = { en, fr };\n\nconst ScreenSceneManager = () => {\n  const { getScene, sceneComponent, loadScene } = useScene();\n\n  // useEffect(() => {\n  //   loadScene(DEFAULT_SCENE);\n  // }, []);\n\n  if (!getScene()) {\n    return <UnboaredPageLoader infos=\"Loading scene\" />;\n  }\n\n  if (sceneComponent) {\n    return sceneComponent;\n  }\n\n  return screenForScene(getScene());\n};\n\nexport default () => {\n  return (\n    <UnboaredGame\n      name={GAME_NAME}\n      initialScene={DEFAULT_SCENE}\n      loader={<Text>Loading screen ...</Text>}\n    >\n      <ScreenSceneManager />\n    </UnboaredGame>\n  );\n};\n","import React from 'react';\nimport { Text } from 'react-native';\n\nimport { i18n } from '@unboared/base-ui.all';\n\nimport { UnboaredGame, useScene } from '@unboared/lib';\n\nimport { DEFAULT_SCENE, GAME_NAME } from './config/Const';\nimport { gamepadForScene } from './config/Scene';\nimport { en, fr } from './translations';\n\ni18n.translations = { en, fr };\n\nconst GamepadSceneManager = () => {\n  const { getScene } = useScene();\n  return gamepadForScene(getScene());\n};\n\nexport default () => {\n  return (\n    <UnboaredGame\n      name={GAME_NAME}\n      initialScene={DEFAULT_SCENE}\n      loader={<Text>Loading gamepad ...</Text>}\n    >\n      <GamepadSceneManager />\n    </UnboaredGame>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { View } from 'react-native';\nimport { useLinkTo } from '@react-navigation/native';\n\nimport {\n  Button,\n  useNormalize,\n  unboaredTheme,\n  Heading,\n  transparency,\n  space,\n  TextInput,\n  DropDown,\n  Text,\n  color,\n} from '@unboared/base-ui.all';\n\nimport { GameRunnerList, GameRunnerVersion } from './components/game_runner';\nimport { computeDefaultGamepadURL } from './config';\n\nconst computeScreenURL = (\n  gameName: string,\n  url: number | string,\n  gamepadURL: string,\n  version: string\n) =>\n  `/screen?url=${encodeURIComponent(url)}${\n    gameName ? `&name=${encodeURIComponent(gameName)}` : ''\n  }&version=${version}&gamepadURL=${encodeURIComponent(gamepadURL)}`;\n\nconst computeGamepadURL = (\n  gameName: string,\n  sessionID: string,\n  url: number | string,\n  version: string\n) =>\n  `/gamepad/${sessionID}?url=${encodeURIComponent(url)}${\n    gameName ? `&name=${encodeURIComponent(gameName)}` : ''\n  }&version=${version}`;\n\nconst HomeApp = () => {\n  const linkTo = useLinkTo();\n  const { normalize } = useNormalize();\n\n  const [name, setName] = useState('');\n  const [screenURL, setScreenURL] = useState('');\n  const [screenGamepadURL, setScreenGamepadURL] = useState('');\n  const [sessionID, setSessionID] = useState('');\n  const [gamepadURL, setGamepadURL] = useState('');\n\n  const [open, setOpen] = useState(false);\n  const [version, setVersion] = useState('0.3');\n  const [items, setItems] = useState(\n    GameRunnerList.map((version) => {\n      return { label: `v${version}`, value: version };\n    })\n  );\n\n  const askGameName = GameRunnerList.slice(\n    0,\n    GameRunnerList.indexOf('0.3')\n  ).includes(version as GameRunnerVersion);\n\n  const goToScreen = () => {\n    if ((askGameName && name) || screenURL) {\n      linkTo(\n        computeScreenURL(\n          name,\n          screenURL,\n          screenGamepadURL || computeDefaultGamepadURL(screenURL),\n          version\n        )\n      );\n    }\n  };\n\n  const goToGamepad = () => {\n    if ((askGameName && name) || (gamepadURL && sessionID)) {\n      linkTo(computeGamepadURL(name, sessionID, gamepadURL, version));\n    }\n  };\n\n  return (\n    <View\n      style={{ flex: 1, backgroundColor: unboaredTheme.dark.backgroundColor }}\n    >\n      <View\n        style={{\n          flex: askGameName ? 0.3 : 0.2,\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <Heading text=\"Game Runner\" />\n        {askGameName && (\n          <View style={{ marginTop: normalize(space.small) }}>\n            <Heading\n              type=\"h3\"\n              text=\"Game\"\n              style={{ marginBottom: normalize(space.smaller) }}\n            />\n            <TextInput\n              text={name}\n              onChangeText={setName}\n              placeholder=\"Game Name ...\"\n            />\n          </View>\n        )}\n      </View>\n      <View style={{ flex: 1, flexDirection: 'row' }}>\n        <View\n          style={{\n            flex: 1,\n            margin: normalize(space.large),\n            backgroundColor: transparency('dark'),\n            borderRadius: normalize(space.small),\n            padding: normalize(space.small),\n            alignItems: 'center',\n            justifyContent: 'space-around',\n          }}\n        >\n          <Heading type=\"h2\" text=\"Screen\" />\n\n          <View>\n            <Heading type=\"h3\" text=\"Screen url\" />\n            <TextInput\n              style={{ marginTop: normalize(space.smaller) }}\n              text={screenURL}\n              onChangeText={setScreenURL}\n              placeholder=\"url of the screen ...\"\n            />\n          </View>\n\n          <View>\n            <Heading type=\"h3\" text=\"Gamepad url (optional)\" />\n            <Text>\n              By default:\n              <Text style={{ color: color.error }}> [SCREEN URL]/gamepad</Text>\n            </Text>\n            <TextInput\n              style={{ marginTop: normalize(space.smaller) }}\n              text={screenGamepadURL}\n              onChangeText={setScreenGamepadURL}\n              placeholder=\"url of the gamepads ...\"\n            />\n          </View>\n          <Button text=\"Launch\" onPress={goToScreen} />\n        </View>\n        <View\n          style={{\n            flex: 1,\n            margin: normalize(space.large),\n            backgroundColor: transparency('dark'),\n            borderRadius: normalize(space.small),\n            padding: normalize(space.small),\n            alignItems: 'center',\n            justifyContent: 'space-around',\n          }}\n        >\n          <Heading type=\"h2\" text=\"Gamepad\" />\n          <View>\n            <Heading type=\"h3\" text=\"Session ID\" />\n            <TextInput\n              style={{ marginTop: normalize(space.smaller) }}\n              text={sessionID}\n              onChangeText={setSessionID}\n              placeholder=\"session id ...\"\n            />\n          </View>\n          <View>\n            <Heading type=\"h3\" text=\"Gamepad Url\" />\n            <TextInput\n              style={{ marginTop: normalize(space.smaller) }}\n              text={gamepadURL}\n              placeholder=\"url of the gamepad ...\"\n              onChangeText={setGamepadURL}\n            />\n          </View>\n\n          <Button text=\"Launch\" onPress={goToGamepad} />\n        </View>\n      </View>\n\n      <View\n        style={{\n          position: 'absolute',\n          left: normalize(space.small),\n          top: normalize(space.small),\n        }}\n      >\n        <DropDown\n          style={{\n            minHeight: 0,\n            minWidth: 0,\n            backgroundColor: unboaredTheme.dark.backgroundColor,\n          }}\n          theme=\"DARK\"\n          open={open}\n          value={version}\n          items={items}\n          setOpen={setOpen}\n          setValue={setVersion}\n          setItems={setItems}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default HomeApp;\n","import React from 'react'\nimport * as Linking from 'expo-linking'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\n\nimport { GAME_NAME } from './config/Const' // some configuration of the game\nimport ScreenApp from './screen_app' // the screen application\nimport GamepadApp from './gamepad_app' // the gamepad application\nimport WebviewScreenApp from './WebViewApp/screen_app' // the screen application\nimport WebviewGamepadApp from './WebViewApp/gamepad_app' // the screen application\nimport HomeApp from './home_app'\nimport { ThemeProvider, unboaredTheme } from '@unboared/base-ui.all'\n\nconst Stack = createStackNavigator()\n\nconst AppStack = () => {\n  return (\n    <Stack.Navigator\n      initialRouteName=\"Home\"\n      screenOptions={{ headerShown: false }}\n    >\n      <Stack.Screen name=\"Home\" component={HomeApp} />\n      <Stack.Screen name=\"Screen\" component={ScreenApp} />\n      <Stack.Screen name=\"Gamepad\" component={GamepadApp} />\n      <Stack.Screen name=\"WebviewScreenApp\" component={WebviewScreenApp} />\n      <Stack.Screen name=\"WebviewGamepadApp\" component={WebviewGamepadApp} /> \n      {/* <Stack.Screen name=\"Test\" component={TestApp} /> */}\n      {/** 🔥 Your screens go here */}\n    </Stack.Navigator>\n  )\n}\n\n// Configure paths to screens and gamepads\nconst config = {\n  screens: {\n    Home: '/',\n    // Test: '/test',\n    Screen: '/screen',\n    Gamepad: '/gamepad/:sessionID',\n    WebviewScreenApp: '/webview',\n    WebviewGamepadApp: '/webview/gamepad',\n  },\n}\n\n// Configure linking\nconst linking = {\n  prefixes: [Linking.createURL('/'), 'unboared://'],\n  config,\n}\n\ninterface NavigationProps\n  extends Partial<React.ComponentProps<typeof NavigationContainer>> {}\n\nexport default function App(props: NavigationProps) {\n  return (\n    <NavigationContainer\n      linking={linking}\n      documentTitle={{\n        formatter: (options, route) =>\n          `${GAME_NAME} • ${options?.title ?? route?.name}`,\n      }}\n      {...props}\n    >\n      <ThemeProvider theme={unboaredTheme.dark}>\n        <AppStack />\n      </ThemeProvider>\n    </NavigationContainer>\n  )\n}\n","import MainApp from './src/app'\n\nimport { i18n } from '@unboared/base-ui.all';\nimport { en, fr } from \"./src/translations\"\n\ni18n.translations = { en, fr }\n\nexport default function App() {\n  return <MainApp />\n}\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}